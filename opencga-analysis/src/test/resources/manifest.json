{
    "author": {
        "name": "",
        "email": ""
    },
    "version": "1.0",
    "id": "hpg-variant",
    "name": "HPG-Variant",
    "description": "HPG-Variant",
    "icon": {
        "size": "",
        "data": ""
    },
    "website": "http://",
    "publication": "",
    "globalParams": [
        {
            "name": "out",
            "description": "Filename prefix for main output files."
        },
        {
            "name": "num-batches",
            "description": "Maximum number of batches stored at the same time."
        },
        {
            "name": "batch-lines",
            "description": "Maximum number of lines in a batch."
        },
        {
            "name": "batch-bytes",
            "description": "Maximum number of bytes in a batch."
        },
        {
            "name": "num-threads",
            "description": "Number of threads when a task runs in parallel."
        },
        {
            "name": "entries-per-thread",
            "description": "Number of entries in a batch each thread processes."
        },
        {
            "name": "config",
            "description": "File that contains the parameters for configuring the application."
        },
        {
            "name": "mmap-vcf",
            "description": "Whether to map VCF files to virtual memory or use the I/O API."
        }
    ],
    "executions": [
        {
            "id": "effect",
            "name": "Variant Effect",
            "executable": "bin/hpg-var-effect",
            "input": ["vcf-file"],
            "inputParamsFromTxt": [
                {
                    "name": "vcf-file-txt",
                    "dataType": "vcf"
                }
            ],
            "output": "outdir",
            "parameters": [
                {
                    "name": "vcf-file",
                    "description": "VCF file used as input.",
                    "required": "true"
                },
                {
                    "name": "url",
                    "description": "URL of the host where remote web services run."
                },
                {
                    "name": "version",
                    "description": "Version of the web service to query."
                },
                {
                    "name": "species",
                    "description": "Species whose genome is taken as reference."
                },
                {
                    "name": "alleles",
                    "description": "Filter: by number of alleles."
                },
                {
                    "name": "coverage",
                    "description": "Filter: by minimum coverage."
                },
                {
                    "name": "quality",
                    "description": "Filter: by minimum quality."
                },
                {
                    "name": "maf",
                    "description": "Filter: by maximum MAF (minimum allele frequency)."
                },
                {
                    "name": "region",
                    "description": "Filter: by a list of regions (chr1:start1-end1,chr2:start2-end2...)."
                },
                {
                    "name": "region-file",
                    "description": "Filter: by a list of regions (read from a GFF file)."
                },
                {
                    "name": "snp",
                    "description": "Filter: by being a SNP or not."
                },
                {
                    "name": "no-phenotypes",
                    "description": "Flag asking not to retrieve phenotypical information."
                },
                {
                    "name": "exclude",
                    "description": "Consequence types to exclude from the query (comma-separated)."
                }
            ],
            "configAttr": [],
            "testCmd": ""
        },
        {
            "id": "vcf-filter",
            "name": "Variant VCF",
            "executable": "bin/hpg-var-vcf filter",
            "input": ["vcf-file"],
            "inputParamsFromTxt": [
                {
                    "name": "vcf-file-txt",
                    "dataType": "vcf"
                }
            ],
            "output": "outdir",
            "parameters": [
                {
                    "name": "vcf-file",
                    "description": "VCF file used as input.",
                    "required": "true"
                },
                {
                    "name": "url",
                    "description": "URL of the host where remote web services run."
                },
                {
                    "name": "version",
                    "description": "Version of the web service to query."
                },
                {
                    "name": "species",
                    "description": "Species whose genome is taken as reference."
                },
                {
                    "name": "alleles",
                    "description": "Filter: by number of alleles."
                },
                {
                    "name": "coverage",
                    "description": "Filter: by minimum coverage."
                },
                {
                    "name": "quality",
                    "description": "Filter: by minimum quality."
                },
                {
                    "name": "maf",
                    "description": "Filter: by maximum MAF (minimum allele frequency)."
                },
                {
                    "name": "region",
                    "description": "Filter: by a list of regions (chr1:start1-end1,chr2:start2-end2...)."
                },
                {
                    "name": "region-file",
                    "description": "Filter: by a list of regions (read from a GFF file)."
                },
                {
                    "name": "snp",
                    "description": "Filter: by being a SNP or not."
                },
                {
                    "name": "save-rejected",
                    "description": "Write a file containing the rejected records."
                }
            ],
            "configAttr": [],
            "testCmd": "",
            "display": {
                "categories": [
                    {
                        "title": "Input data",
                        "parameters": ["vcf-file"]
                    },
                    {
                        "title": "Select VCF options",
                        "parameters": ["coverage", "quality"]
                    }
                ]
            }
        },
        {
            "id": "vcf-merge",
            "name": "Variant VCF",
            "executable": "bin/hpg-var-vcf merge",
            "input": ["vcf-list"],
            "inputParamsFromTxt": [
                {
                    "name": "vcf-file-content",
                    "dataType": "vcf"
                }
            ],
            "output": "outdir",
            "parameters": [
                {
                    "name": "vcf-list",
                    "description": "VCF file used as input.",
                    "required": "true"
                },
                {
                    "name": "url",
                    "description": "URL of the host where remote web services run."
                },
                {
                    "name": "version",
                    "description": "Version of the web service to query."
                },
                {
                    "name": "species",
                    "description": "Species whose genome is taken as reference."
                },
                {
                    "name": "missing-mode",
                    "description": "How to fill missing genotypes (missing = ./., reference = 0/0)."
                },
                {
                    "name": "copy-filter",
                    "description": "Whether to copy the FILTER column from the original files into the samples."
                },
                {
                    "name": "copy-info",
                    "description": "Whether to copy the INFO column from the original files into the samples."
                },
                {
                    "name": "info-fields",
                    "description": "Information to generate in the new INFO column."
                }
            ],
            "configAttr": [],
            "testCmd": ""
        },
        {
            "id": "vcf-split",
            "name": "Variant VCF",
            "executable": "bin/hpg-var-vcf split",
            "input": ["vcf-file", "ped-file"],
            "inputParamsFromTxt": [
                {
                    "name": "vcf-file-txt",
                    "dataType": "vcf"
                },
                {
                    "name": "ped-file-txt",
                    "dataType": "ped"
                }
            ],
            "output": "outdir",
            "parameters": [
                {
                    "name": "vcf-file",
                    "description": "VCF file used as input.",
                    "required": "true"
                },
                {
                    "name": "criterion",
                    "description": "Criterion for splitting the file."
                }
            ],
            "configAttr": [],
            "testCmd": ""
        },
        {
            "id": "vcf-stats",
            "name": "Variant VCF",
            "executable": "bin/hpg-var-vcf stats",
            "input": ["vcf-file", "ped-file"],
            "inputParamsFromTxt": [
                {
                    "name": "vcf-file-txt",
                    "dataType": "vcf"
                },
                {
                    "name": "ped-file-txt",
                    "dataType": "ped"
                }
            ],
            "output": "outdir",
            "parameters": [
                {
                    "name": "vcf-file",
                    "description": "VCF file used as input.",
                    "required": "true"
                },
                {
                    "name": "ped-file",
                    "description": "PED file used as input.",
                    "required": "false"
                },
                {
                    "name": "db",
                    "description": "Save statistics to sqlite",
                    "required": "false"
                },
                {
                    "name": "variable",
                    "description": "Name for the variable field",
                    "required": "false"
                },
                {
                    "name": "variable-group",
                    "description": "Sequence of variable groups",
                    "required": "false"
                },
                {
                    "name": "variants",
                    "description": "Get statistics about variants, both per variant and per file (default)."
                },
                {
                    "name": "samples",
                    "description": "Get statistics about samples."
                }
            ],
            "configAttr": [],
            "testCmd": ""
        },
        {
            "id": "vcf-annot",
            "name": "Variant VCF",
            "executable": "bin/hpg-var-vcf annot",
            "input": ["vcf-file"],
            "inputParamsFromTxt": [
                {
                    "name": "vcf-file-txt",
                    "dataType": "vcf"
                }
            ],
            "output": "outdir",
            "parameters": [
                {
                    "name": "vcf-file",
                    "description": "VCF file used as input.",
                    "required": "true"
                },
                {
                    "name": "dbsnp",
                    "description": "Annotate the dbSNP id",
                    "required": "false"
                },
                {
                    "name": "effect",
                    "description": "Annoate the Effect",
                    "required": "false"
                }
            ],
            "configAttr": [],
            "testCmd": ""
        },
        {
            "id": "gwas-assoc",
            "name": "Variant GWAS",
            "executable": "bin/hpg-var-gwas.py assoc",
            "input": ["vcf-file", "ped-file"],
            "inputParamsFromTxt": [
                {
                    "name": "vcf-file-txt",
                    "dataType": "vcf"
                },
                {
                    "name": "ped-file-txt",
                    "dataType": "ped"
                }
            ],
            "output": "outdir",
            "parameters": [
                {
                    "name": "vcf-file",
                    "description": "VCF file used as input.",
                    "required": "true"
                },
                {
                    "name": "ped-file",
                    "description": "PED file used as input.",
                    "required": "true"
                },
                {
                    "name": "url",
                    "description": "URL of the host where remote web services run."
                },
                {
                    "name": "version",
                    "description": "Version of the web service to query."
                },
                {
                    "name": "species",
                    "description": "Species whose genome is taken as reference."
                },
                {
                    "name": "alleles",
                    "description": "Filter: by number of alleles."
                },
                {
                    "name": "coverage",
                    "description": "Filter: by minimum coverage."
                },
                {
                    "name": "quality",
                    "description": "Filter: by minimum quality."
                },
                {
                    "name": "maf",
                    "description": "Filter: by maximum MAF (minimum allele frequency)."
                },
                {
                    "name": "region",
                    "description": "Filter: by a list of regions (chr1:start1-end1,chr2:start2-end2...)."
                },
                {
                    "name": "region-file",
                    "description": "Filter: by a list of regions (read from a GFF file)."
                },
                {
                    "name": "snp",
                    "description": "Filter: by being a SNP or not."
                },
                {
                    "name": "chisq",
                    "description": "Chi-square association test."
                },
                {
                    "name": "fisher",
                    "description": "Fisher's exact test."
                }
            ],
            "configAttr": [],
            "testCmd": ""
        },
        {
            "id": "gwas-tdt",
            "name": "Variant GWAS",
            "executable": "bin/hpg-var-gwas.py tdt",
            "input": ["vcf-file", "ped-file"],
            "inputParamsFromTxt": [
                {
                    "name": "vcf-file-txt",
                    "dataType": "vcf"
                },
                {
                    "name": "ped-file-txt",
                    "dataType": "ped"
                }
            ],
            "output": "outdir",
            "parameters": [
                {
                    "name": "vcf-file",
                    "description": "VCF file used as input.",
                    "required": "true"
                },
                {
                    "name": "ped-file",
                    "description": "PED file used as input.",
                    "required": "true"
                },
                {
                    "name": "url",
                    "description": "URL of the host where remote web services run."
                },
                {
                    "name": "version",
                    "description": "Version of the web service to query."
                },
                {
                    "name": "species",
                    "description": "Species whose genome is taken as reference."
                },
                {
                    "name": "alleles",
                    "description": "Filter: by number of alleles."
                },
                {
                    "name": "coverage",
                    "description": "Filter: by minimum coverage."
                },
                {
                    "name": "quality",
                    "description": "Filter: by minimum quality."
                },
                {
                    "name": "maf",
                    "description": "Filter: by maximum MAF (minimum allele frequency)."
                },
                {
                    "name": "region",
                    "description": "Filter: by a list of regions (chr1:start1-end1,chr2:start2-end2...)."
                },
                {
                    "name": "region-file",
                    "description": "Filter: by a list of regions (read from a GFF file)."
                },
                {
                    "name": "snp",
                    "description": "Filter: by being a SNP or not."
                }
            ],
            "configAttr": [],
            "testCmd": ""
        },
        {
            "id": "epistasis",
            "name": "Variant Epistasis",
            "executable": "bin/vcf-epi.py",
            "input": ["vcf-file", "ped-file"],
            "inputParamsFromTxt": [
                {
                    "name": "vcf-file-txt",
                    "dataType": "vcf"
                },
                {
                    "name": "ped-file-txt",
                    "dataType": "ped"
                }
            ],
            "output": "outdir",
            "parameters": [
                {
                    "name": "vcf-file",
                    "description": "VCF file used as input.",
                    "required": "true"
                },
                {
                    "name": "ped-file",
                    "description": "PED file used as input.",
                    "required": "true"
                },
                {
                    "name": "alleles",
                    "description": "Filter: by number of alleles"
                },
                {
                    "name": "coverage",
                    "description": "Filter: by minimum coverage"
                },
                {
                    "name": "quality",
                    "description": "Filter: by minimum quality"
                },
                {
                    "name": "maf",
                    "description": "Filter: by MAF (minimum allele frequency, decimal like 0.01)"
                },
                {
                    "name": "missing",
                    "description": "Filter: by maximum missing values (decimal like 0.1)"
                },
                {
                    "name": "gene",
                    "description": "Filter: by a comma-separated list of genes"
                },
                {
                    "name": "region",
                    "description": "Filter: by a list of regions (chr1:start1-end1,chr2:start2-end2...)"
                },
                {
                    "name": "region-file",
                    "description": "Filter: by a list of regions (read from a GFF file)"
                },
                {
                    "name": "region-type",
                    "description": "Filter: by type of region (used along with the 'region-file' argument)"
                },
                {
                    "name": "snp",
                    "description": "Filter: by being a SNP or not (include/exclude)"
                },
                {
                    "name": "indel",
                    "description": "Filter: by being an indel or not, counting characters in REF and ALT (include/exclude)"
                },
                {
                    "name": "inh-dom",
                    "description": "Filter: by percentage of samples following dominant inheritance pattern (decimal like 0.1)"
                },
                {
                    "name": "inh-rec",
                    "description": "Filter: by percentage of samples following recessive inheritance pattern (decimal like 0.1)"
                },
                {
                    "name": "order",
                    "description": "Number of SNPs to be combined at the same time"
                },
                {
                    "name": "num-folds",
                    "description": "Number of folds in a k-fold cross-validation"
                },
                {
                    "name": "num-cv-runs",
                    "description": "Number of times the k-fold cross-validation process is run"
                },
                {
                    "name": "rank-size",
                    "description": "Number of best models saved"
                },
                {
                    "name": "eval-subset",
                    "description": "Whether to used training (default) or testing partitions when evaluating the best models"
                },
                {
                    "name": "eval-mode",
                    "description": "Whether to rank risky combinations by their CV-C or CV-A (values can be 'count' or 'accu')"
                },
                {
                    "name": "stride",
                    "description": "Number of SNPs per block partition of the dataset"
                }
            ],
            "configAttr": [],
            "testCmd": ""
        },
        {
            "id": "fastqc",
            "name": "FastQC",
            "executable": "./fastqc",
            "input": ["fastq_file","contaminants","adapters","limits"],
            "inputParamsFromTxt": [],
            "output": "outdir",
            "parameters": [
                {
                    "name": "outdir",
                    "description": "Create all output files in the specified output directory",
                    "type": "folder"
                },
                {
                    "name": "casava",
                    "description": "Files come from raw casava output. Files in the same sample group (differing only by the group number) will be analysed as a set rather than individually. Sequences with the filter flag set in the header will be excluded from the analysis. Files must have the same names given to them by casava (including being gzipped and ending with .gz) otherwise they won't be grouped together correctly.",
                    "arity": 0
                },
                {
                    "name": "nano",
                    "description": "Files come from naopore sequences and are in fast5 format. In this mode you can pass in directories to process and the program will take in all fast5 files within those directories and produce a single output file from the sequences found in all files.",
                    "arity": 0
                },
                {
                    "name": "nofilter",
                    "description": "If running with --casava then don't remove read flagged by casava as poor quality when performing the QC analysis.",
                    "arity": 0
                },
                {
                    "name": "nogroup",
                    "description": "Disable grouping of bases for reads >50bp. All reports will show data for every base in the read.  WARNING: Using this option will cause fastqc to crash and burn if you use it on really long reads, and your plots may end up a ridiculous size. You have been warned!",
                    "arity": 0
                },
                {
                    "name": "threads",
                    "description": "Specifies the number of files which can be processed simultaneously. Each thread will be allocated 250MB of memory so you shouldn't run more threads than your available memory will cope with, and not more than 6 threads on a 32 bit machine",
                    "type": "numeric",
                    "default": "1"
                },
                {
                    "name": "contaminants",
                    "description": "Specifies a non-default file which contains the list of contaminants to screen overrepresented sequences against. The file must contain sets of named contaminants in the form name[tab]sequence. Lines prefixed with a hash will be ignored.",
                    "type": "file"
                },
                {
                    "name": "adapters",
                    "description": "Specifies a non-default file which contains the list of adapter sequences which will be explicity searched against the library. The file must contain sets of named adapters in the form name[tab]sequence.  Lines prefixed with a hash will be ignored.",
                    "type": "file"
                },
                {
                    "name": "limits",
                    "description": "Specifies a non-default file which contains a set of criteria which will be used to determine the warn/error limits for the various modules. This file can also be used to selectively remove some modules from the output all together.",
                    "type": "file"
                },
                {
                    "name": "kmers",
                    "description": "Specifies the length of Kmer to look for in the Kmer content module. Specified Kmer length must be between 2 and 10. Default length is 7 if not specified.",
                    "type": "numeric",
                    "default": "7",
                    "range": "2:10"
                },
                {
                    "name": "fastq_file",
                    "description": "Insert here all the fastq files to be analyzed.",
                    "type": "file",
                    "required": true,
                    "unnamed": true,
                    "arity": -1
                }
            ],
            "configAttr": [],
            "testCmd": "",
            "display": {
                "categories": [
                    {
                        "title": "Mandatory fields",
                        "parameters": ["fastq_file","outdir"]
                    },
                    {
                        "title": "Optional arguments",
                        "parameters": ["threads", "kmers", "casava"]
                    }
                ]
            }
        }


    ],
    "examples": [
        {
            "name": "Example 1",
            "executionId": "1",
            "options": [
                {
                    "paramName": "input",
                    "value": "example/CHB.exon.2010_03.sites.vcf"
                }
            ]
        },
        {
            "name": "Example 2",
            "executionId": "1",
            "options": [
                {
                    "paramName": "input",
                    "value": "example/1000genomes_5000_variants.vcf"
                }
            ]
        }
    ],
    "acl": [
        {
            "userId": "12345",
            "read": "true",
            "write": "false",
            "execute": "true"
        }
    ]
}
